{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@emotion/css\"","webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"lodash\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./components/findWorstStatus.ts","webpack:///./components/comparisonFunctions.ts","webpack:///./components/stats.ts","webpack:///./components/processor.ts","webpack:///./components/getMetricHints.ts","webpack:///./components/StatusOverviewPanel.tsx","webpack:///./components/rules/types.ts","webpack:///./components/rules/unitFormats.ts","webpack:///./components/rules/ThresholdEditor.tsx","webpack:///./components/rules/RuleItem.tsx","webpack:///../node_modules/uuid/dist/esm-browser/native.js","webpack:///../node_modules/uuid/dist/esm-browser/rng.js","webpack:///../node_modules/uuid/dist/esm-browser/stringify.js","webpack:///../node_modules/uuid/dist/esm-browser/v4.js","webpack:///./components/rules/RuleEditor.tsx","webpack:///./const.ts","webpack:///./module.ts","webpack:///./components/getColorByState.ts","webpack:///./components/displaySeriesData.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__644__;","module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__545__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__980__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { RuleItemType } from '../components/rules/types';\r\nimport { MetricHint } from 'types';\r\n\r\n\r\ninterface StatusResult {\r\n  state: string;\r\n  customColor?: string;\r\n  textColor?: string;\r\n}\r\n\r\nexport function findWorstStatus(metricHints: MetricHint[], rules: RuleItemType[]): string | StatusResult {\r\n\r\n  const statusOrder = ['information', 'minor', 'warning', 'average', 'high', 'critical', 'disaster'];\r\n  let worstStatusIndex = -1;\r\n  let customColor: string | undefined = undefined;\r\n  let textColor: string | undefined = undefined;\r\n\r\n  if (!rules) { return worstStatusIndex >= 0 ? statusOrder[worstStatusIndex] + '-state' : 'ok-state'; }\r\n\r\n  for (const rule of rules) {\r\n    let series;\r\n    for (const hint of metricHints) {\r\n      //if (hint.label === rule.seriesMatch) {\r\n      if (new RegExp(rule.seriesMatch).test(hint.label)) {\r\n        series = hint;\r\n        //break;\r\n        if (!series) { continue; }\r\n        const value = series.value;\r\n\r\n        // Handle custom thresholds\r\n        if (rule.displayMode === 'number' && rule.useCustomThresholds && rule.customThresholds && rule.customThresholds.length > 0) {\r\n          // Sort thresholds by order value (ascending)\r\n          const sortedThresholds = [...rule.customThresholds].sort((a, b) => a.order - b.order);\r\n\r\n          for (const threshold of sortedThresholds) {\r\n            const thresholdValue = parseFloat(threshold.value);\r\n            if (threshold.value && !isNaN(thresholdValue)) {\r\n              if (typeof value === 'number' && (rule.revers ? (value <= thresholdValue) : (value >= thresholdValue))) {\r\n                const statusIndex = statusOrder.indexOf(threshold.name);\r\n                if (statusIndex > worstStatusIndex) {\r\n                  worstStatusIndex = statusIndex;\r\n                  customColor = threshold.color; // Store the custom color\r\n                  textColor = threshold.textColor; // Store the custom text color if available\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        // Handle standard number thresholds\r\n        else if (rule.displayMode === 'number' && rule.numberThreshold) {\r\n          for (const [status, threshold] of Object.entries(rule.numberThreshold)) {\r\n            if (threshold !== null) {\r\n              if (status === 'showOnlyOnThreshold') { continue; }\r\n              if (typeof value === 'number' && (rule.revers ? (value <= parseFloat(threshold)) : (value >= parseFloat(threshold)))) {\r\n                const statusIndex = statusOrder.indexOf(status);\r\n                if (statusIndex > worstStatusIndex) {\r\n                  worstStatusIndex = statusIndex;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } else if (rule.displayMode === 'string' && rule.stringThreshold) {\r\n          for (const [status, statusValue] of Object.entries(rule.stringThreshold)) {\r\n            if (String(value) === statusValue) {\r\n              const statusIndex = statusOrder.indexOf(status);\r\n              if (statusIndex > worstStatusIndex) {\r\n                worstStatusIndex = statusIndex;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  if (worstStatusIndex >= 0) {\r\n    const state = statusOrder[worstStatusIndex] + '-state';\r\n    if (customColor || textColor) {\r\n      // Return object with state, custom color, and text color\r\n      return {\r\n        state,\r\n        customColor,\r\n        textColor\r\n      };\r\n    }\r\n    return state;\r\n  }\r\n\r\n  return 'ok-state';\r\n}\r\n\r\n\r\n","interface Operators {\r\n  [key: string]: (a: any, b: any) => boolean;\r\n}\r\n  \r\nconst operators: Operators = {\r\n  'eq': (a: any, b: any) => a === b,\r\n  'ne': (a: any, b: any) => a !== b,\r\n  'ge': (a: any, b: any) => a > b,\r\n  'lt': (a: any, b: any) => a < b,\r\n};\r\n  \r\nexport function compareValues(value1: any, value2: any, operator: string) {\r\n  const operation = operators[operator];\r\n  return operation ? operation(value1, value2) : false;\r\n}\r\n\r\n","////////////////////////////////////////////////////////////\r\n// Original code by Grafana Polystat Panel https://github.com/grafana/grafana-polystat-panel/blob/main/src/data/stats.ts\r\n// Edited by serrrios\r\n////////////////////////////////////////////////////////////\r\nimport { FieldCalcs } from '@grafana/data';\r\nimport { MetricsModel } from 'types';\r\n\r\nexport function GetValueByOperator(\r\n  metricName: string,\r\n  data: MetricsModel | null,\r\n  operatorName: string,\r\n  calcs: FieldCalcs\r\n) {\r\n  switch (operatorName) {\r\n    case 'name':\r\n      return metricName;\r\n    case 'last_time':\r\n      if (data) {\r\n        return data.timestamp;\r\n      } else {\r\n        return Date.now();\r\n      }\r\n    default:\r\n      let aValue = calcs[operatorName];\r\n      return aValue;\r\n  }\r\n}\r\n\r\n","////////////////////////////////////////////////////////////\r\n// Original code by Grafana Polystat Panel https://github.com/grafana/grafana-polystat-panel/\r\n// Edited by serrrios\r\n////////////////////////////////////////////////////////////\r\nimport { MetricsModel } from 'types';\r\nimport { InsertTime } from './deframer';\r\nimport { GetValueByOperator } from './stats';\r\nimport { PanelData, DataFrame, Field, FieldType, reduceField, getFieldDisplayName, getValueFormat, formattedValueToString } from '@grafana/data';\r\n\r\nexport function ProcessDataFrames(\r\n    data: PanelData,\r\n    globalOperator: string,\r\n  ): MetricsModel[] {\r\n    // check if data contains a field ca  lled Time of type time\r\n    let processedData = InsertTime(data.series);\r\n    let internalData = [] as MetricsModel[];\r\n    // just one for now...\r\n    processedData.map((item) => {\r\n      const models = DataFrameToMetrics(item, globalOperator);\r\n      for (const aModel of models) {\r\n        internalData.push(aModel);\r\n      }\r\n    });\r\n    return internalData;\r\n  }\r\n  \r\n  export function DataFrameToMetrics(frame: DataFrame, globalOperator: string): MetricsModel[] {\r\n\r\n    const valueFields: Field[] = [];\r\n  \r\n    for (const aField of frame.fields) {\r\n      if (aField.type === FieldType.number || aField.type === FieldType.string || aField.type === FieldType.time) {\r\n        valueFields.push(aField);\r\n      }\r\n    }\r\n    const models: MetricsModel[] = [];\r\n  \r\n    for (const valueField of valueFields) {\r\n      const standardCalcs = reduceField({ field: valueField!, reducers: ['bogus'] });\r\n      \r\n      const valueFieldName = getFieldDisplayName(valueField!, frame);\r\n      const operatorValue = GetValueByOperator(valueFieldName, null, globalOperator, standardCalcs);\r\n  \r\n      let maxDecimals = 4;\r\n      if (valueField!.config.decimals !== undefined && valueField!.config.decimals !== null) {\r\n        maxDecimals = valueField!.config.decimals;\r\n      }\r\n      \r\n      // Use field config for formatting\r\n      let valueFormatted = '';\r\n      // Special handling for time fields\r\n      if (valueField!.type === FieldType.time) {\r\n        // Use time formatting from field config or default to ISO string\r\n        const timeValue = new Date(operatorValue);\r\n        if (valueField!.config.unit) {\r\n          // If unit is specified in field config, use it\r\n          const result = getValueFormat(valueField!.config.unit)(operatorValue, maxDecimals, undefined, undefined);\r\n          valueFormatted = formattedValueToString(result);\r\n        } else {\r\n          // Default time formatting if none specified\r\n          valueFormatted = timeValue.toISOString();\r\n        }\r\n      } else {\r\n        // Use standard field formatting for non-time fields\r\n        const result = getValueFormat(valueField!.config.unit)(operatorValue, maxDecimals, undefined, undefined);\r\n        valueFormatted = formattedValueToString(result);\r\n      }\r\n  \r\n      const model: MetricsModel = {\r\n        thresholdLevel: 0,\r\n        value: operatorValue,\r\n        valueFormatted: valueFormatted,\r\n        valueRounded: roundValue(operatorValue, maxDecimals) || operatorValue,\r\n        stats: standardCalcs,\r\n        name: valueFieldName,\r\n        displayName: valueFieldName,\r\n        timestamp: 0,\r\n        prefix: '',\r\n        suffix: '',\r\n        color: '',\r\n        clickThrough: '',\r\n        operatorName: '',\r\n        newTabEnabled: true,\r\n        sanitizedURL: '',\r\n        sanitizeURLEnabled: true,\r\n        showName: true,\r\n        showValue: true,\r\n        isComposite: false,\r\n        members: [],\r\n        // Store field type to use in rules\r\n        fieldType: valueField!.type,\r\n      };\r\n      models.push(model);\r\n    }\r\n    return models;\r\n  }\r\n  \r\n  const roundValue = (num: number, decimals: number) => {\r\n    if (num === null) {\r\n      return null;\r\n    }\r\n    const n = Math.pow(10, decimals);\r\n    const formatted = (n * num).toFixed(decimals);\r\n    return Math.round(parseFloat(formatted)) / n;\r\n  };\r\n\r\n","import { DataFrameToMetrics } from './processor'\r\nimport { PanelData } from '@grafana/data';\r\n\r\n\r\nimport { MetricHint } from '../types';\r\n  \r\nexport function getMetricHints(data: PanelData): MetricHint[] {\r\n    const hints: MetricHint[] = [];\r\n    for (const metric of data.series) {\r\n      const hintsValue = DataFrameToMetrics(metric, 'last');\r\n\r\n      for (const hintValue of hintsValue) {\r\n        hints.push({\r\n          label: hintValue.name,\r\n          value: hintValue.valueRounded,\r\n          valueFormatted: hintValue.valueFormatted,\r\n          fieldType: hintValue.fieldType\r\n        });\r\n      }\r\n    }\r\n    return hints;\r\n}\r\n\r\n// export function getMetricHints(data: PanelData): MetricHint[] {\r\n//   const hints: MetricHint[] = [];\r\n//   for (const metric of data.series) {\r\n//     const hintValue = DataFrameToMetrics(metric, 'last')[0];\r\n//     hints.push({\r\n//       label: hintValue.name,\r\n//       value: hintValue.value,\r\n//     });\r\n//   }\r\n//   return hints;\r\n// }\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { PanelProps } from '@grafana/data';\r\nimport { StatusOverviewOptions } from 'types';\r\nimport { css, cx } from '@emotion/css';\r\nimport { useStyles2, Tooltip } from '@grafana/ui';\r\nimport { findWorstStatus } from './findWorstStatus';\r\nimport { displaySeriesData } from './displaySeriesData';\r\nimport { getColorByState } from './getColorByState';\r\nimport { getMetricHints } from './getMetricHints';\r\ninterface Props extends PanelProps<StatusOverviewOptions> { }\r\n\r\nexport const StatusOverviewPanel: React.FC<Props> = ({ options, data, width, height, id, replaceVariables }) => {\r\n  // State declarations\r\n  const [state, setState] = useState<string | { state: string; customColor?: string; textColor?: string } | null>(null);\r\n  const [blink, setBlink] = useState(false);\r\n  const [displayData, setDisplayData] = useState<Array<{ line: string; tooltip: string; }>>([]);\r\n\r\n  // Global panel state for tracking state changes\r\n  const GlobalPanelState = useMemo(() => {\r\n    return [];\r\n  }, []);\r\n\r\n  // Get color information based on the current state\r\n  const colorResult = getColorByState(state ?? '', options);\r\n  const backgroundColor = typeof colorResult === 'string' ? colorResult : colorResult.backgroundColor;\r\n  const textColor = typeof colorResult === 'string' ? undefined : colorResult.textColor;\r\n\r\n  // Define styles after we have the variables we need\r\n  const useStyles = useStyles2((theme) => {\r\n    return {\r\n      wrapper: css`\r\n        position: relative;\r\n      `,\r\n      svg: css`\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n      `,\r\n      textBox: css`\r\n        position: absolute;\r\n        bottom: 0;\r\n        left: 0;\r\n        padding: 10px;\r\n      `,\r\n      valueMap: css`\r\n        font-size: 0.85em;\r\n        line-height: ${options.lineHeight || 1.5}em;\r\n      `,\r\n      bottom_section: css`\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-content: center; \r\n        height: 100%;\r\n      `,\r\n      top_section: css`\r\n        box-sizing: inherit;\r\n        vertical-align: middle;\r\n        height: 100%;\r\n      `,\r\n      status_name_row: css`\r\n        overflow: hidden;\r\n        color: ${textColor || '#080808'};\r\n      `,\r\n      h1: {\r\n        margin: `0px 0px ${options.titleMargin || 10}px`,\r\n        fontSize: '1.4rem',\r\n        'padding-top': '3px',\r\n        'letter-spacing': '-0.01893em',\r\n      },\r\n      a: {\r\n        color: textColor || '#080808',\r\n      },\r\n      blink: css`\r\n      animation-name: blinker;\r\n      animation-iteration-count: infinite;\r\n      animation-timing-function: cubic-bezier(1.0,2.0,0,1.0);\r\n      animation-duration: 1s;\r\n      animation-play-state: running;\r\n      -webkit-animation-name: blinker;\r\n      -webkit-animation-iteration-count: infinite;\r\n      -webkit-animation-play-state: running;\r\n      -webkit-animation-timing-function: cubic-bezier(1.0,2.0,0,1.0);\r\n      -webkit-animation-duration: 1s;\r\n      `,\r\n    };\r\n  });\r\n\r\n  // Effect to update the state based on metric values\r\n  useEffect(() => {\r\n    setBlink(false);\r\n    if (options.statePanel === 'enable') {\r\n      setState(findWorstStatus(getMetricHints(data), options.ruleConfig.rules));\r\n    }\r\n    else if (options.statePanel === 'na') {\r\n      setState('na-state')\r\n    }\r\n    else {\r\n      setState('disable-state')\r\n    }\r\n  }, [data, options.ruleConfig.rules, options.statePanel]);\r\n\r\n  // Effect to handle blinking when states change\r\n  useEffect(() => {\r\n    setBlink(false);\r\n    // Get the state string regardless of whether state is a string or an object\r\n    const stateStr = state === null ? null : (typeof state === 'object' ? state.state : state);\r\n\r\n    if ((GlobalPanelState[id] !== 'not-ok-state') && stateStr === 'ok-state') {\r\n      if (typeof GlobalPanelState[id] !== \"undefined\") {\r\n        setBlink(true);\r\n      }\r\n      // @ts-ignore\r\n      GlobalPanelState[id] = 'not-ok-state';\r\n    } else if ((GlobalPanelState[id] !== 'not-disaster-state') && stateStr === 'disaster-state') {\r\n      if (typeof GlobalPanelState[id] !== \"undefined\") {\r\n        setBlink(true);\r\n      }\r\n      // @ts-ignore\r\n      GlobalPanelState[id] = 'not-disaster-state';\r\n    } else if ((GlobalPanelState[id] !== 'not-high-state') && stateStr === 'high-state') {\r\n      if (typeof GlobalPanelState[id] !== \"undefined\") {\r\n        setBlink(true);\r\n      }\r\n      // @ts-ignore\r\n      GlobalPanelState[id] = 'not-high-state';\r\n    } else if ((GlobalPanelState[id] !== 'not-average-state') && stateStr === 'average-state') {\r\n      if (typeof GlobalPanelState[id] !== \"undefined\") {\r\n        setBlink(true);\r\n      }\r\n      // @ts-ignore\r\n      GlobalPanelState[id] = 'not-average-state';\r\n    } else if ((GlobalPanelState[id] !== 'not-warning-state') && stateStr === 'warning-state') {\r\n      if (typeof GlobalPanelState[id] !== \"undefined\") {\r\n        setBlink(true);\r\n      }\r\n      // @ts-ignore\r\n      GlobalPanelState[id] = 'not-warning-state';\r\n    } else if ((GlobalPanelState[id] !== 'not-information-state') && stateStr === 'information-state') {\r\n      if (typeof GlobalPanelState[id] !== \"undefined\") {\r\n        setBlink(true);\r\n      }\r\n      // @ts-ignore\r\n      GlobalPanelState[id] = 'not-information-state';\r\n    }\r\n  }, [id, state, GlobalPanelState]);\r\n\r\n  // Calculate the class for blinking effect\r\n  const blinkClass = blink && options.blink ? useStyles.blink : '';\r\n\r\n  // Effect to update the display data\r\n  useEffect(() => {\r\n    let result = displaySeriesData(getMetricHints(data), options.ruleConfig.rules);\r\n    setDisplayData(result || []);\r\n  }, [data, options]);\r\n\r\n  return (\r\n    <div\r\n      className={cx(\r\n        useStyles.wrapper,\r\n        blinkClass,\r\n        blinkKeyframes,\r\n        css`\r\n          width: ${width + 16}px;\r\n          height: ${height + 16}px;\r\n\t        text-align: center;\r\n          overflow: hidden;\r\n          position: relative;\r\n          border-radius: 3px;\r\n          backface-visibility: hidden;\r\n          transition: transform 0.5s;\r\n\t        margin: -8px 0 0 -8px;\r\n          background-color: ${backgroundColor};\r\n        `\r\n      )}\r\n    >\r\n      <div className={useStyles.top_section}>\r\n        <div className={useStyles.bottom_section}>\r\n          <div className={useStyles.status_name_row}>\r\n            <h1 style={useStyles.h1}>\r\n              {options.dataLink ? (\r\n                <a style={useStyles.a} href={replaceVariables(options.dataLink)}>\r\n                  {replaceVariables(options.panelName)}\r\n                </a>\r\n              ) : (\r\n                <span style={useStyles.a}>{replaceVariables(options.panelName)}</span>\r\n              )}\r\n            </h1>\r\n            {options.statePanel === 'enable' ? (\r\n              <div className={useStyles.valueMap}>\r\n                {options.modePanel && options.modePanel === 'in' ? (\r\n                  displayData.map((item, index) => (\r\n                    <span key={index} style={{ marginRight: index < displayData.length - 1 ? `${options.inlineSpacing || 10}px` : '0' }}>\r\n                      {item.tooltip ? (\r\n                        <Tooltip content={<div style={{ whiteSpace: 'pre-wrap' }}>{item.tooltip}</div>}>\r\n                          <span>\r\n                            {item.line}\r\n                          </span>\r\n                        </Tooltip>\r\n                      ) : (\r\n                        <span>\r\n                          {item.line}\r\n                        </span>\r\n                      )}\r\n                      <span>\r\n                        {index < displayData.length - 1 ? ' / ' : ''}\r\n                      </span>\r\n                    </span>\r\n                  ))\r\n                ) : (\r\n                  displayData.map((item, index) => (\r\n                    <div key={index} style={{ marginBottom: `${options.textSpacing || 5}px` }}>\r\n                      {item.tooltip ? (\r\n                        <Tooltip content={<div style={{ whiteSpace: 'pre-wrap' }}>{item.tooltip}</div>}>\r\n                          <span>\r\n                            {item.line}\r\n                          </span>\r\n                        </Tooltip>\r\n                      ) : (\r\n                        <span>\r\n                          {item.line}\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n            ) : ''}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst blinkKeyframes = css`\r\n    @keyframes blinker {\r\n      from {\r\n        opacity: 1.0;\r\n      }\r\n      50% {\r\n        opacity: 0.5;\r\n      }\r\n      to {\r\n        opacity: 1.0;\r\n      }\r\n    }\r\n  \r\n    @-webkit-keyframes blinker {\r\n      from {\r\n        opacity: 1.0;\r\n      }\r\n      50% {\r\n        opacity: 0.5;\r\n      }\r\n      to {\r\n        opacity: 1.0;\r\n      }\r\n    }\r\n  `;\r\n\r\n","\r\nimport { SelectableValue } from '@grafana/data';\r\n\r\nexport interface RuleMember { }\r\n\r\nexport interface ThresholdItem {\r\n  name: string;        // The threshold name (e.g., \"warning\", \"critical\")\r\n  value: string;       // The threshold value as a string\r\n  color: string;       // The background color for this threshold\r\n  textColor?: string;  // The text color for this threshold\r\n  order: number;       // The order of this threshold in severity (lower = less severe)\r\n}\r\n\r\nexport const DisplayModes: SelectableValue[] = [\r\n  { value: 'number', label: 'Number threshold' },\r\n  { value: 'string', label: 'String threshold' },\r\n  { value: 'show', label: 'Show only ' },\r\n];\r\n\r\nexport const LogicalModes: SelectableValue[] = [\r\n  { value: 'eq', label: 'Equivalent' },\r\n  { value: 'ne', label: 'Not equivalent' },\r\n  { value: 'ge', label: 'Greater than' },\r\n  { value: 'lt', label: 'Less than' },\r\n];\r\n\r\nexport interface RuleItemType {\r\n  name: string;\r\n  label: string;\r\n  order: number;\r\n  isTemplated: boolean;\r\n  displayMode: string;\r\n  description?: string | '';\r\n  enabled: boolean;\r\n  showName: boolean;\r\n  showValue: boolean;\r\n  showRule: boolean;\r\n  showMembers: boolean;\r\n  showOnlyOnThreshold: boolean;\r\n  revers: boolean;\r\n  // For backward compatibility\r\n  numberThreshold: {\r\n    information: string;\r\n    minor: string;\r\n    warning: string;\r\n    average: string;\r\n    high: string;\r\n    critical: string;\r\n    disaster: string;\r\n  };\r\n  // For backward compatibility\r\n  stringThreshold: {\r\n    information: string;\r\n    minor: string;\r\n    warning: string;\r\n    average: string;\r\n    high: string;\r\n    critical: string;\r\n    disaster: string;\r\n  };\r\n  // Dynamic thresholds\r\n  customThresholds?: ThresholdItem[];\r\n  useCustomThresholds?: boolean;\r\n  clickThrough: string | '';\r\n  clickThroughSanitize: boolean;\r\n  clickThroughOpenNewTab: boolean;\r\n  logicExpress: boolean;\r\n  logicExpressValue: string;\r\n  logicalMode: string;\r\n  seriesMatch: string | '';\r\n  alias?: string | '';\r\n  shortAlias?: string | '';\r\n  ID?: string;\r\n  // Field formatting options\r\n  unitFormat?: string;\r\n  decimals?: number;\r\n  useCustomFormatting?: boolean;\r\n}\r\n\r\nexport interface RuleItemTracker {\r\n  rule: RuleItemType;\r\n  order: number;\r\n  ID: string;\r\n}\r\n\r\nexport interface RuleItemProps {\r\n  rule: RuleItemType;\r\n  ID: string;\r\n  enabled: boolean;\r\n  setter: any;\r\n  remover: any;\r\n  moveUp: any;\r\n  moveDown: any;\r\n  createDuplicate: any;\r\n  context: any;\r\n}\r\n\r\nexport interface RuleMetricItemProps {\r\n\r\n  index: number;\r\n  disabled: boolean;\r\n  removeMetric: any;\r\n  updateMetric: any;\r\n  updateMetricAlias: any;\r\n  context: any;\r\n}\r\n","import { SelectableValue } from '@grafana/data';\r\n\r\n// Common unit formats used in the plugin\r\nexport const UnitFormatOptions: SelectableValue[] = [\r\n  { value: 'none', label: 'None' },\r\n  // Time formats\r\n  { value: 'dateTimeAsIso', label: 'ISO DateTime' },\r\n  { value: 'dateTimeAsUS', label: 'US DateTime' },\r\n  { value: 'dateTimeFromNow', label: 'Time from Now' },\r\n  \r\n  // Duration formats\r\n  { value: 's', label: 'Seconds' },\r\n  { value: 'ms', label: 'Milliseconds' },\r\n  { value: 'dtdurations', label: 'Duration (Days/Hours/Minutes/Seconds)' },\r\n  { value: 'dthms', label: 'Days/Hours/Minutes/Seconds' },\r\n  \r\n  // Number formats\r\n  { value: 'percent', label: 'Percent (0-100)' },\r\n  { value: 'percentunit', label: 'Percent (0.0-1.0)' },\r\n  \r\n  // Bytes and bits\r\n  { value: 'bytes', label: 'Bytes' },\r\n  { value: 'bits', label: 'Bits' },\r\n  { value: 'kbytes', label: 'Kilobytes' },\r\n  { value: 'mbytes', label: 'Megabytes' },\r\n  { value: 'gbytes', label: 'Gigabytes' },\r\n  \r\n  // Throughput\r\n  { value: 'ops', label: 'Operations/sec' },\r\n  { value: 'rps', label: 'Requests/sec' },\r\n  { value: 'wps', label: 'Writes/sec' },\r\n  { value: 'iops', label: 'I/O Ops/sec' },\r\n  \r\n  // Temperature\r\n  { value: 'celsius', label: 'Celsius' },\r\n  { value: 'fahrenheit', label: 'Fahrenheit' },\r\n  \r\n  // Misc\r\n  { value: 'none', label: 'None' },\r\n  { value: 'short', label: 'Short' },\r\n  { value: 'hex', label: 'Hexadecimal' },\r\n  { value: 'string', label: 'String' },\r\n];\r\n","import React from 'react';\r\nimport { Button, ColorPicker, IconButton, Input, useStyles2 } from '@grafana/ui';\r\nimport { css } from '@emotion/css';\r\nimport { ThresholdItem } from './types';\r\nimport { GrafanaTheme2 } from '@grafana/data';\r\n\r\ninterface ThresholdEditorProps {\r\n    thresholds: ThresholdItem[];\r\n    onChange: (thresholds: ThresholdItem[]) => void;\r\n}\r\n\r\nexport const ThresholdEditor: React.FC<ThresholdEditorProps> = ({ thresholds, onChange }) => {\r\n    const styles = useStyles2(getStyles);\r\n\r\n    const addThreshold = () => {\r\n        const nextOrder = thresholds.length > 0\r\n            ? Math.max(...thresholds.map(t => t.order)) + 1\r\n            : 0;\r\n\r\n        const newThreshold: ThresholdItem = {\r\n            name: `threshold${nextOrder}`,\r\n            value: '',\r\n            color: 'rgb(50, 116, 217)',\r\n            textColor: '#ffffff', // Default to white text\r\n            order: nextOrder,\r\n        }; onChange([...thresholds, newThreshold]);\r\n    };\r\n\r\n    const removeThreshold = (index: number) => {\r\n        const updatedThresholds = [...thresholds];\r\n        updatedThresholds.splice(index, 1);\r\n        onChange(updatedThresholds);\r\n    };\r\n\r\n    const updateThreshold = (index: number, field: keyof ThresholdItem, value: any) => {\r\n        const updatedThresholds = [...thresholds];\r\n        updatedThresholds[index] = { ...updatedThresholds[index], [field]: value };\r\n        onChange(updatedThresholds);\r\n    };\r\n\r\n    const moveThreshold = (index: number, direction: 'up' | 'down') => {\r\n        if ((direction === 'up' && index === 0) ||\r\n            (direction === 'down' && index === thresholds.length - 1)) {\r\n            return;\r\n        }\r\n\r\n        const updatedThresholds = [...thresholds];\r\n        const swapIndex = direction === 'up' ? index - 1 : index + 1;\r\n\r\n        // Swap positions\r\n        [updatedThresholds[index], updatedThresholds[swapIndex]] =\r\n            [updatedThresholds[swapIndex], updatedThresholds[index]];\r\n\r\n        // Update order values\r\n        updatedThresholds[index].order = index;\r\n        updatedThresholds[swapIndex].order = swapIndex;\r\n\r\n        onChange(updatedThresholds);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h4>Custom Thresholds</h4>\r\n            <div className={styles.thresholdList}>\r\n                {thresholds.map((threshold, index) => (\r\n                    <div key={`threshold-${index}`} className={styles.thresholdRow}>\r\n                        <div className={styles.horizontalGroup}>\r\n                            <Input\r\n                                placeholder=\"Name\"\r\n                                value={threshold.name}\r\n                                onChange={e => updateThreshold(index, 'name', e.currentTarget.value)}\r\n                                width={15}\r\n                            />\r\n                            <Input\r\n                                placeholder=\"Value\"\r\n                                value={threshold.value}\r\n                                onChange={e => updateThreshold(index, 'value', e.currentTarget.value)}\r\n                                width={15}\r\n                            />\r\n                            <div className={styles.colorPickerContainer}>\r\n                                <label>Background:</label>\r\n                                <ColorPicker\r\n                                    color={threshold.color}\r\n                                    onChange={color => updateThreshold(index, 'color', color)}\r\n                                />\r\n                            </div>\r\n                            <div className={styles.colorPickerContainer}>\r\n                                <label>Text:</label>\r\n                                <ColorPicker\r\n                                    color={threshold.textColor || '#080808'}\r\n                                    onChange={color => updateThreshold(index, 'textColor', color)}\r\n                                />\r\n                            </div>\r\n                            <IconButton name=\"arrow-up\" onClick={() => moveThreshold(index, 'up')} />\r\n                            <IconButton name=\"arrow-down\" onClick={() => moveThreshold(index, 'down')} />\r\n                            <IconButton name=\"trash-alt\" onClick={() => removeThreshold(index)} />\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <Button variant=\"secondary\" icon=\"plus\" onClick={addThreshold} className={styles.addButton}>\r\n                Add Threshold\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst getStyles = (theme: GrafanaTheme2) => {\r\n    return {\r\n        thresholdList: css`\r\n      margin-bottom: ${theme.spacing(2)};\r\n    `,\r\n        thresholdRow: css`\r\n      margin-bottom: ${theme.spacing(1)};\r\n      padding: ${theme.spacing(1)};\r\n      border-radius: ${theme.shape.borderRadius()};\r\n      background: ${theme.colors.background.secondary};\r\n    `,\r\n        horizontalGroup: css`\r\n      display: flex;\r\n      flex-direction: row;\r\n      align-items: center;\r\n      gap: ${theme.spacing(1)};\r\n    `,\r\n        addButton: css`\r\n      margin-top: ${theme.spacing(1)};\r\n    `,\r\n        colorPickerContainer: css`\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: flex-start;\r\n      \r\n      label {\r\n        font-size: 0.8rem;\r\n        margin-bottom: 2px;\r\n      }\r\n    `,\r\n    };\r\n};\r\n","////////////////////////////////////////////////////////////\r\n// Original code by Grafana Polystat Panel https://github.com/grafana/grafana-polystat-panel/blob/main/src/components/composites/CompositeItem.tsx\r\n// Edited by serrrios\r\n////////////////////////////////////////////////////////////\r\nimport React, { useState, useEffect } from 'react';\r\nimport { IconName, Input, Select, Field, FieldSet, Switch, Card, IconButton, Cascader, TextArea, CascaderOption } from '@grafana/ui';\r\nimport { DisplayModes, LogicalModes, RuleItemProps, RuleItemType } from './types';\r\nimport { DataFrameToMetrics } from '../processor'\r\nimport { SelectableValue, FieldType } from '@grafana/data';\r\nimport { UnitFormatOptions } from './unitFormats';\r\nimport { ThresholdEditor } from './ThresholdEditor';\r\n\r\nexport interface MetricsModel {\r\n  name: string;\r\n  value: number;\r\n}\r\n\r\nexport const RuleItem: React.FC<RuleItemProps> = (props: RuleItemProps) => {\r\n  //  export const RuleItem: React.FC<Props> = ({data, options}) => {\r\n  const [metricHints, setMetricHints] = useState<CascaderOption[]>([]);\r\n  const [rule, _setRule] = useState(props.rule);\r\n  const getDisplayMode = (displayMode: string) => {\r\n    const keys = DisplayModes.keys();\r\n    for (const aKey of keys) {\r\n      if (DisplayModes[aKey].value === displayMode) {\r\n        return DisplayModes[aKey];\r\n      }\r\n    }\r\n    // no match, return all by default\r\n    return DisplayModes[0];\r\n  };\r\n  const [displayMode, setDisplayMode] = useState<SelectableValue<any>>(getDisplayMode(props.rule.displayMode));\r\n\r\n  const getLogicalMode = (logicalMode: string) => {\r\n    const keys = LogicalModes.keys();\r\n    for (const aKey of keys) {\r\n      if (LogicalModes[aKey].value === logicalMode) {\r\n        return LogicalModes[aKey];\r\n      }\r\n    }\r\n    // no match, return all by default\r\n    return LogicalModes[0];\r\n  };\r\n  const [logicalMode, setLogicalMode] = useState<SelectableValue<any>>(getLogicalMode(props.rule.logicalMode));\r\n  //  const [logicalMode, setLogicalMode] = useState<string>(getLogicalMode(props.rule.logicalMode).value);\r\n  const setRule = (value: RuleItemType) => {\r\n    _setRule(value);\r\n    props.setter(rule.order, value);\r\n  };\r\n  const [visibleIcon] = useState<IconName>('eye');\r\n  const [hiddenIcon] = useState<IconName>('eye-slash');\r\n  const removeItem = () => {\r\n    //alert('high');\r\n    props.remover(rule.order);\r\n    // call parent remove function\r\n  };\r\n\r\n  const toggleShowName = () => {\r\n    const currentState = rule.showName;\r\n    //setShowName(!currentState);\r\n    setRule({ ...rule, showName: !currentState });\r\n  };\r\n\r\n  const toggleShowValue = () => {\r\n    const currentShowValue = rule.showValue;\r\n    //setShowName(!currentState);\r\n    setRule({ ...rule, showValue: !currentShowValue });\r\n  };\r\n\r\n  const moveUp = () => {\r\n    props.moveUp(rule.order);\r\n  };\r\n  const moveDown = () => {\r\n    props.moveDown(rule.order);\r\n  };\r\n  const createDuplicate = () => {\r\n    props.createDuplicate(rule.order);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    if (props.context.data) {\r\n      let hints: CascaderOption[] = [];\r\n      let metricHints = new Set<string>();\r\n      let fieldTypeMap = new Map<string, string>();\r\n\r\n      for (const metric of props.context.data) {\r\n        let hintsValue = DataFrameToMetrics(metric, 'last');\r\n        for (const hintValue of hintsValue) {\r\n          metricHints.add(hintValue.name);\r\n          // Store field type for each metric\r\n          if (hintValue.fieldType) {\r\n            fieldTypeMap.set(hintValue.name, hintValue.fieldType);\r\n          }\r\n        }\r\n      }\r\n\r\n      for (const metricName of metricHints) {\r\n        const fieldType = fieldTypeMap.get(metricName) || 'unknown';\r\n        // Add field type information to the label\r\n        let fieldTypeLabel = '';\r\n\r\n        if (fieldType === FieldType.time) {\r\n          fieldTypeLabel = ' (time)';\r\n        } else if (fieldType === FieldType.number) {\r\n          fieldTypeLabel = ' (number)';\r\n        } else if (fieldType === FieldType.string) {\r\n          fieldTypeLabel = ' (string)';\r\n        }\r\n\r\n        hints.push({\r\n          label: `${metricName}${fieldTypeLabel}`,\r\n          value: metricName,\r\n        });\r\n      }\r\n      setMetricHints(hints);\r\n    }\r\n  }, [props.context.data]);\r\n\r\n  return (\r\n    <Card heading=\"\" key={`rule-card-${props.ID}`}>\r\n      <Card.Meta>\r\n        <FieldSet>\r\n          <Field label=\"Rule Name\" disabled={!rule.showRule}>\r\n            <Input\r\n              value={rule.name}\r\n              placeholder=\"\"\r\n              disabled={!rule.showRule}\r\n              onChange={(e) => setRule({ ...rule, name: e.currentTarget.value })}\r\n            />\r\n          </Field>\r\n\r\n          <Field label=\"Metric\" disabled={!rule.showRule} style={{ minWidth: '175px' }} >\r\n            <Cascader\r\n              key={`cmi-index-${props.ID}`}\r\n              initialValue={rule.seriesMatch}\r\n              allowCustomValue\r\n              placeholder=\"Сhoose a metric or enter a regular expression\"\r\n              options={metricHints}\r\n              onSelect={(val: string) => setRule({ ...rule, seriesMatch: val })}\r\n            />\r\n          </Field>\r\n          <Field label=\"Alias metric name\" description=\"Used as metric name if exists\">\r\n            <Input\r\n              value={rule.alias}\r\n              placeholder=\"Enter alias or a regular expression\"\r\n              disabled={!rule.showRule}\r\n              onChange={(e) => setRule({ ...rule, alias: e.currentTarget.value })}\r\n            />\r\n          </Field>\r\n          <Field label=\"Description\" description=\"Used on tooltip if exists\" >\r\n            <TextArea\r\n              value={rule.description}\r\n              placeholder=\"\"\r\n              style={{ resize: 'both' }}\r\n              disabled={!rule.showRule}\r\n              onChange={(e) => setRule({ ...rule, description: e.currentTarget.value })}\r\n            />\r\n          </Field>\r\n          <Field label=\"Show metric name\" description=\"Toggle Display of metric name\" disabled={!rule.showRule}>\r\n            <Switch\r\n              transparent={true}\r\n              value={rule.showName}\r\n              disabled={!rule.showRule}\r\n              onChange={toggleShowName}\r\n            ></Switch>\r\n          </Field>\r\n          <Field label=\"Show metric value\" description=\"Toggle Display of metric value\" disabled={!rule.showRule}>\r\n            <Switch\r\n              transparent={true}\r\n              value={rule.showValue}\r\n              disabled={!rule.showRule}\r\n              onChange={toggleShowValue}\r\n            />\r\n          </Field>\r\n\r\n\r\n          <Field\r\n            label=\"Display Mode\"\r\n            description=\"Metric handler type\"\r\n            disabled={!rule.showRule}\r\n          >\r\n            <Select\r\n              menuShouldPortal={true}\r\n              value={displayMode}\r\n              onChange={(v) => {\r\n                setDisplayMode(v);\r\n                setRule({ ...rule, displayMode: v.value });\r\n              }}\r\n              options={DisplayModes}\r\n            />\r\n          </Field>\r\n          {rule.displayMode === 'number' ? (\r\n            <>\r\n              <Field\r\n                label=\"Show only on Threshold\"\r\n                disabled={!rule.showRule}\r\n              >\r\n                <Switch\r\n                  transparent={true}\r\n                  value={rule.showOnlyOnThreshold}\r\n                  disabled={!rule.showRule}\r\n                  onChange={() => setRule({ ...rule, showOnlyOnThreshold: !rule.showOnlyOnThreshold, },)}\r\n                />\r\n              </Field>\r\n              <Field\r\n                label=\"Revers logic\"\r\n                description=\"Inverse processing of values, if processing is needed from the largest to the smallest.\"\r\n                disabled={!rule.showRule}\r\n              >\r\n                <Switch\r\n                  transparent={true}\r\n                  value={rule.revers}\r\n                  disabled={!rule.showRule}\r\n                  onChange={() => setRule({ ...rule, revers: !rule.revers, },)}\r\n                />\r\n              </Field>          <Field label=\"Use Custom Thresholds\" description=\"Define your own set of thresholds\" disabled={!rule.showRule}>\r\n                <Switch\r\n                  transparent={true}\r\n                  value={rule.useCustomThresholds || false}\r\n                  disabled={!rule.showRule}\r\n                  onChange={() => {\r\n                    // Initialize custom thresholds if they don't exist\r\n                    let customThresholds = rule.customThresholds;\r\n                    if (!customThresholds || customThresholds.length === 0) {\r\n                      customThresholds = [\r\n                        { name: 'information', value: '1', color: '#8ab8ff', textColor: '#000000', order: 0 },\r\n                        { name: 'warning', value: '2', color: '#e0b400', textColor: '#000000', order: 1 },\r\n                        { name: 'average', value: '3', color: '#fa6400', textColor: '#000000', order: 2 },\r\n                        { name: 'high', value: '4', color: '#d95c1d', textColor: '#ffffff', order: 3 },\r\n                        { name: 'disaster', value: '5', color: '#c4162a', textColor: '#ffffff', order: 4 },\r\n                      ];\r\n                    }\r\n                    setRule({\r\n                      ...rule,\r\n                      useCustomThresholds: !rule.useCustomThresholds,\r\n                      customThresholds: customThresholds\r\n                    });\r\n                  }}\r\n                />\r\n              </Field>\r\n\r\n              {rule.useCustomThresholds ? (\r\n                <ThresholdEditor\r\n                  thresholds={rule.customThresholds || []}\r\n                  onChange={(updatedThresholds) => {\r\n                    setRule({ ...rule, customThresholds: updatedThresholds });\r\n                  }}\r\n                />\r\n              ) : (\r\n                <>\r\n                  <Field label=\"Information threshold\" disabled={!rule.showRule}>\r\n                    <Input\r\n                      value={rule.numberThreshold?.information?.toString() ?? ''}\r\n                      placeholder=\"1\"\r\n                      onChange={(e) => setRule({ ...rule, numberThreshold: { ...rule.numberThreshold, information: e.currentTarget.value.match(/^[\\d.]*$/) ? e.currentTarget.value : rule.numberThreshold?.information ?? null, }, })}\r\n                    />\r\n                  </Field>\r\n                  <Field label=\"Minor threshold\" disabled={!rule.showRule}>\r\n                    <Input\r\n                      value={rule.numberThreshold?.minor?.toString() ?? ''}\r\n                      placeholder=\"1.5\"\r\n                      onChange={(e) => setRule({ ...rule, numberThreshold: { ...rule.numberThreshold, minor: e.currentTarget.value.match(/^[\\d.]*$/) ? e.currentTarget.value : rule.numberThreshold?.minor ?? null, }, })}\r\n                    />\r\n                  </Field>\r\n                  <Field label=\"Warning threshold\" disabled={!rule.showRule}>\r\n                    <Input\r\n                      value={rule.numberThreshold?.warning?.toString() ?? ''}\r\n                      placeholder=\"2\"\r\n                      onChange={(e) => setRule({ ...rule, numberThreshold: { ...rule.numberThreshold, warning: e.currentTarget.value.match(/^[\\d.]*$/) ? e.currentTarget.value : rule.numberThreshold?.warning ?? null, }, })}\r\n                    />\r\n                  </Field>\r\n                  <Field label=\"Average threshold\" disabled={!rule.showRule}>\r\n                    <Input\r\n                      value={rule.numberThreshold?.average?.toString() ?? ''}\r\n                      placeholder=\"3\"\r\n                      onChange={(e) => setRule({ ...rule, numberThreshold: { ...rule.numberThreshold, average: e.currentTarget.value.match(/^[\\d.]*$/) ? e.currentTarget.value : rule.numberThreshold?.average ?? null, }, })}\r\n                    />\r\n                  </Field>\r\n                  <Field label=\"High threshold\" disabled={!rule.showRule}>\r\n                    <Input\r\n                      value={rule.numberThreshold?.high?.toString() ?? ''}\r\n                      placeholder=\"4\"\r\n                      onChange={(e) => setRule({ ...rule, numberThreshold: { ...rule.numberThreshold, high: e.currentTarget.value.match(/^[\\d.]*$/) ? e.currentTarget.value : rule.numberThreshold?.high ?? null, }, })}\r\n                    />\r\n                  </Field>\r\n                  <Field label=\"Critical threshold\" disabled={!rule.showRule}>\r\n                    <Input\r\n                      value={rule.numberThreshold?.critical?.toString() ?? ''}\r\n                      placeholder=\"4.5\"\r\n                      onChange={(e) => setRule({ ...rule, numberThreshold: { ...rule.numberThreshold, critical: e.currentTarget.value.match(/^[\\d.]*$/) ? e.currentTarget.value : rule.numberThreshold?.critical ?? null, }, })}\r\n                    />\r\n                  </Field>\r\n                  <Field label=\"Disaster threshold\" disabled={!rule.showRule}>\r\n                    <Input\r\n                      value={rule.numberThreshold?.disaster ?? ''}\r\n                      placeholder=\"5\"\r\n                      onChange={(e) => setRule({ ...rule, numberThreshold: { ...rule.numberThreshold, disaster: e.currentTarget.value.match(/^[\\d.]*$/) ? e.currentTarget.value : rule.numberThreshold?.disaster ?? null, }, })}\r\n                      type=\"text\"\r\n                      onKeyDown={e => (e.keyCode === 69 || e.keyCode === 190) && e.preventDefault()}\r\n                    />\r\n                  </Field>\r\n                </>\r\n              )}\r\n            </>\r\n          ) : null}\r\n          {rule.displayMode === 'string' ? (\r\n            <>\r\n              <Field\r\n                label=\"Show only on Threshold\"\r\n                disabled={!rule.showRule}\r\n              >\r\n                <Switch\r\n                  transparent={true}\r\n                  value={rule.showOnlyOnThreshold}\r\n                  disabled={!rule.showRule}\r\n                  onChange={() => setRule({ ...rule, showOnlyOnThreshold: !rule.showOnlyOnThreshold, },)}\r\n                />\r\n              </Field>\r\n\r\n              <Field label=\"Information threshold\" disabled={!rule.showRule}>\r\n                <Input\r\n                  value={rule.stringThreshold?.information}\r\n                  placeholder=\"Information\"\r\n                  onChange={(e) => setRule({ ...rule, stringThreshold: { ...rule.stringThreshold, information: e.currentTarget.value, }, })}\r\n                />\r\n              </Field>\r\n              <Field label=\"Minor threshold\" disabled={!rule.showRule}>\r\n                <Input\r\n                  value={rule.stringThreshold?.minor}\r\n                  placeholder=\"Minor\"\r\n                  onChange={(e) => setRule({ ...rule, stringThreshold: { ...rule.stringThreshold, minor: e.currentTarget.value, }, })}\r\n                />\r\n              </Field>\r\n              <Field label=\"Warning threshold\" disabled={!rule.showRule}>\r\n                <Input\r\n                  value={rule.stringThreshold?.warning}\r\n                  placeholder=\"Warning\"\r\n                  onChange={(e) => setRule({ ...rule, stringThreshold: { ...rule.stringThreshold, warning: e.currentTarget.value, }, })}\r\n                />\r\n              </Field>\r\n              <Field label=\"Average threshold\" disabled={!rule.showRule}>\r\n                <Input\r\n                  value={rule.stringThreshold?.average}\r\n                  placeholder=\"Average\"\r\n                  onChange={(e) => setRule({ ...rule, stringThreshold: { ...rule.stringThreshold, average: e.currentTarget.value, }, })}\r\n                />\r\n              </Field>\r\n              <Field label=\"High threshold\" disabled={!rule.showRule}>\r\n                <Input\r\n                  value={rule.stringThreshold?.high}\r\n                  placeholder=\"High\"\r\n                  onChange={(e) => setRule({ ...rule, stringThreshold: { ...rule.stringThreshold, high: e.currentTarget.value, }, })}\r\n                />\r\n              </Field>\r\n              <Field label=\"Critical threshold\" disabled={!rule.showRule}>\r\n                <Input\r\n                  value={rule.stringThreshold?.critical}\r\n                  placeholder=\"Critical\"\r\n                  onChange={(e) => setRule({ ...rule, stringThreshold: { ...rule.stringThreshold, critical: e.currentTarget.value, }, })}\r\n                />\r\n              </Field>\r\n              <Field label=\"Disaster threshold\" disabled={!rule.showRule}>\r\n                <Input\r\n                  value={rule.stringThreshold?.disaster}\r\n                  placeholder=\"Disaster\"\r\n                  onChange={(e) => setRule({ ...rule, stringThreshold: { ...rule.stringThreshold, disaster: e.currentTarget.value, }, })}\r\n                />\r\n              </Field>\r\n            </>\r\n          ) : null}\r\n          {rule.displayMode === 'show' ? (\r\n            <>\r\n              <Field label=\"Use logical expressions\" disabled={!rule.showRule}>\r\n                <Switch\r\n                  transparent={true}\r\n                  value={rule.logicExpress}\r\n                  disabled={!rule.showRule}\r\n                  onChange={() => setRule({ ...rule, logicExpress: !rule.logicExpress })}\r\n                ></Switch>\r\n              </Field>\r\n\r\n              {rule.logicExpress ? (\r\n                <>\r\n                  <Field\r\n                    label=\"Logical Mode\"\r\n                    disabled={!rule.showRule}\r\n                  >\r\n                    <Select\r\n                      menuShouldPortal={true}\r\n                      value={logicalMode}\r\n                      onChange={(v) => {\r\n                        setLogicalMode(v);\r\n                        setRule({ ...rule, logicalMode: v.value });\r\n                      }}\r\n                      options={LogicalModes}\r\n                    />\r\n                  </Field>\r\n                  <Field label=\"Value\" disabled={!rule.showRule}>\r\n                    <Input\r\n                      value={rule.logicExpressValue}\r\n                      placeholder=\"100500\"\r\n                      onChange={(e) => setRule({ ...rule, logicExpressValue: e.currentTarget.value })}\r\n                    />\r\n                  </Field>\r\n                </>\r\n              ) : null}\r\n            </>\r\n          ) : null}\r\n\r\n          {/* Field Formatting Options */}\r\n          <Field label=\"Use Custom Formatting\" description=\"Apply custom formatting to this metric\" disabled={!rule.showRule}>\r\n            <Switch\r\n              transparent={true}\r\n              value={rule.useCustomFormatting}\r\n              disabled={!rule.showRule}\r\n              onChange={() => setRule({ ...rule, useCustomFormatting: !rule.useCustomFormatting })}\r\n            />\r\n          </Field>\r\n\r\n          {rule.useCustomFormatting ? (\r\n            <>\r\n              <Field label=\"Unit Format\" description=\"Format for displaying values\" disabled={!rule.showRule}>\r\n                <Select\r\n                  menuShouldPortal={true}\r\n                  options={UnitFormatOptions}\r\n                  value={UnitFormatOptions.find(option => option.value === rule.unitFormat) || UnitFormatOptions[0]}\r\n                  onChange={(v) => setRule({ ...rule, unitFormat: v.value })}\r\n                  placeholder=\"Select unit format\"\r\n                />\r\n              </Field>\r\n              <Field label=\"Decimals\" description=\"Number of decimal places to show\" disabled={!rule.showRule}>\r\n                <Input\r\n                  value={rule.decimals !== undefined ? rule.decimals.toString() : ''}\r\n                  type=\"number\"\r\n                  placeholder=\"Auto\"\r\n                  min={0}\r\n                  max={20}\r\n                  onChange={(e) => {\r\n                    const value = e.currentTarget.value;\r\n                    const decimals = value !== '' ? parseInt(value, 10) : undefined;\r\n                    setRule({ ...rule, decimals: decimals });\r\n                  }}\r\n                />\r\n              </Field>\r\n            </>\r\n          ) : null}\r\n\r\n        </FieldSet>\r\n      </Card.Meta>\r\n      <Card.Actions>\r\n        <IconButton key=\"moveUp\" name=\"arrow-up\" tooltip=\"Move Up\" onClick={moveUp} />\r\n        <IconButton key=\"moveDown\" name=\"arrow-down\" tooltip=\"Move Down\" onClick={moveDown} />\r\n        <IconButton\r\n          key=\"showRule\"\r\n          name={rule.showRule ? visibleIcon : hiddenIcon}\r\n          tooltip=\"Hide/Show Rule\"\r\n          onClick={() => setRule({ ...rule, showRule: !rule.showRule })}\r\n        />\r\n        <IconButton key=\"copyRule\" name=\"copy\" tooltip=\"Duplicate\" onClick={createDuplicate} />\r\n        <IconButton\r\n          key=\"deleteRule\"\r\n          variant=\"destructive\"\r\n          name=\"trash-alt\"\r\n          tooltip=\"Delete Rule\"\r\n          onClick={removeItem}\r\n        />\r\n      </Card.Actions>\r\n    </Card>\r\n  );\r\n};\r\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","////////////////////////////////////////////////////////////\r\n// Original code by Grafana Polystat Panel https://github.com/grafana/grafana-polystat-panel/blob/main/src/components/composites/\r\n// Edited by serrrios\r\n////////////////////////////////////////////////////////////\r\nimport React, { useState } from 'react';\r\nimport { StandardEditorProps } from '@grafana/data';\r\nimport { Button, Collapse } from '@grafana/ui';\r\n\r\nimport { RuleItem } from './RuleItem';\r\nimport { DisplayModes, RuleItemType, RuleItemTracker, LogicalModes } from './types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport interface RuleEditorSettings {\r\n  rules: RuleItemType[];\r\n  enabled: boolean;\r\n  animationSpeed: string;\r\n}\r\n\r\ninterface Props extends StandardEditorProps<string | string[] | null, RuleEditorSettings> { }\r\n\r\n\r\nexport const RuleEditor: React.FC<Props> = ({ context, onChange }) => {\r\n  const [settings] = useState(context.options.ruleConfig);\r\n  //  const [rulesEnabled, _setRulesEnabled] = useState(context.options.ruleConfig.enabled);\r\n  const [tracker, _setTracker] = useState((): RuleItemTracker[] => {\r\n    if (!settings.rules) {\r\n      const empty: RuleItemTracker[] = [];\r\n      return empty;\r\n    }\r\n    const items: RuleItemTracker[] = [];\r\n    settings.rules.forEach((value: RuleItemType, index: number) => {\r\n      items[index] = {\r\n        rule: value,\r\n        order: index,\r\n        ID: uuidv4(),\r\n      };\r\n    });\r\n    return items;\r\n  });\r\n\r\n  const setTracker = (v: RuleItemTracker[]) => {\r\n    _setTracker(v);\r\n    // update the panel config (only the rules themselves, not the tracker)\r\n    const allRules: RuleItemType[] = [];\r\n    v.forEach((element) => {\r\n      allRules.push(element.rule);\r\n    });\r\n    const ruleConfig = {\r\n      rules: allRules,\r\n    };\r\n    onChange(ruleConfig as any);\r\n  };\r\n\r\n  // tracks rule card collapse state\r\n  const [isOpen, setIsOpen] = useState((): boolean[] => {\r\n    if (!tracker) {\r\n      const empty: boolean[] = [];\r\n      return empty;\r\n    }\r\n    let size = tracker.length;\r\n    const openStates: boolean[] = [];\r\n    while (size--) {\r\n      openStates[size] = false;\r\n    }\r\n    return openStates;\r\n  });\r\n\r\n  // generic move\r\n  const arrayMove = (arr: any, oldIndex: number, newIndex: number) => {\r\n    if (newIndex >= arr.length) {\r\n      let k = newIndex - arr.length + 1;\r\n      while (k--) {\r\n        arr.push(undefined);\r\n      }\r\n    }\r\n    arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);\r\n  };\r\n\r\n  const moveDown = (index: number) => {\r\n    if (index !== tracker.length - 1) {\r\n      arrayMove(tracker, index, index + 1);\r\n      // reorder\r\n      for (let i = 0; i < tracker.length; i++) {\r\n        tracker[i].order = i;\r\n        tracker[i].rule.order = i;\r\n      }\r\n      setTracker([...tracker]);\r\n    }\r\n  };\r\n\r\n  const moveUp = (index: number) => {\r\n    if (index > 0) {\r\n      arrayMove(tracker, index, index - 1);\r\n      // reorder\r\n      for (let i = 0; i < tracker.length; i++) {\r\n        tracker[i].order = i;\r\n        tracker[i].rule.order = i;\r\n      }\r\n      setTracker([...tracker]);\r\n    }\r\n  };\r\n\r\n  const createDuplicate = (index: number) => {\r\n    const original = tracker[index].rule;\r\n    const order = tracker.length;\r\n    const aRule: RuleItemType = {\r\n      name: `${original.name} Copy`,\r\n      label: `${original.name} Copy`,\r\n      order: order,\r\n      isTemplated: original.isTemplated,\r\n      displayMode: original.displayMode,\r\n      enabled: original.enabled,\r\n      showName: original.showName,\r\n      showValue: original.showValue,\r\n      showRule: original.showRule,\r\n      showMembers: original.showMembers,\r\n      logicExpress: original.logicExpress,\r\n      logicExpressValue: original.logicExpressValue,\r\n      clickThrough: original.clickThrough,\r\n      clickThroughOpenNewTab: original.clickThroughOpenNewTab,\r\n      clickThroughSanitize: original.clickThroughSanitize,\r\n      alias: original.alias,\r\n      description: original.alias,\r\n      shortAlias: original.shortAlias,\r\n      seriesMatch: original.seriesMatch,\r\n      logicalMode: original.logicalMode,\r\n      numberThreshold: original.numberThreshold,\r\n      stringThreshold: original.stringThreshold,\r\n      showOnlyOnThreshold: original.showOnlyOnThreshold,\r\n      revers: original.revers,\r\n      // Copy formatting options\r\n      useCustomFormatting: original.useCustomFormatting,\r\n      unitFormat: original.unitFormat,\r\n      decimals: original.decimals,\r\n    };\r\n    const aTracker: RuleItemTracker = {\r\n      rule: aRule,\r\n      order: order,\r\n      ID: uuidv4(),\r\n    };\r\n    setTracker([...tracker, aTracker]);\r\n    setIsOpen([...isOpen, true]);\r\n  };\r\n\r\n  const updateRule = (index: number, value: RuleItemType) => {\r\n    tracker[index].rule = value;\r\n    setTracker([...tracker]);\r\n  };\r\n\r\n\r\n  const removeRule = (ruleIndex: number) => {\r\n    // find the rule by the ruleIndex\r\n    const allRules = [...tracker];\r\n    let removeIndex = 0;\r\n    for (let i = 0; i < allRules.length; i++) {\r\n      if (allRules[i].order === ruleIndex) {\r\n        removeIndex = i;\r\n        break;\r\n      }\r\n    }\r\n    allRules.splice(removeIndex, 1);\r\n    // reorder\r\n    //for (let i = 0; i < allRules.length; i++) {\r\n    for (let i = 0; i < allRules.length; i++) {\r\n      allRules[i].order = i;\r\n      allRules[i].rule.order = i;\r\n    }\r\n    setTracker([...allRules]);\r\n  };\r\n\r\n  const toggleOpener = (index: number) => {\r\n    const toggleState = [...isOpen];\r\n    toggleState[index] = !toggleState[index];\r\n    setIsOpen([...toggleState]);\r\n  };\r\n\r\n  const addItem = () => {\r\n    const order = tracker.length;\r\n    const aRule: RuleItemType = {\r\n      name: `Rule-${order}`,\r\n      label: `Rule-${order}`,\r\n      showName: true,\r\n      showValue: true,\r\n      showMembers: false,\r\n      showOnlyOnThreshold: false,\r\n      revers: false,\r\n      numberThreshold: {\r\n        information: '',\r\n        minor: '',\r\n        warning: '',\r\n        average: '',\r\n        high: '',\r\n        critical: '',\r\n        disaster: '',\r\n      },\r\n      stringThreshold: {\r\n        information: '',\r\n        minor: '',\r\n        warning: '',\r\n        average: '',\r\n        high: '',\r\n        critical: '',\r\n        disaster: '',\r\n      },\r\n      logicExpress: false,\r\n      logicalMode: LogicalModes[0].value,\r\n      logicExpressValue: '',\r\n      showRule: true,\r\n      isTemplated: false,\r\n      enabled: true,\r\n      displayMode: DisplayModes[0].value,\r\n      clickThrough: '',\r\n      clickThroughOpenNewTab: true,\r\n      clickThroughSanitize: true,\r\n      order: order,\r\n      alias: '',\r\n      description: '',\r\n      shortAlias: '',\r\n      seriesMatch: '',\r\n      // Add default formatting options\r\n      useCustomFormatting: false,\r\n      unitFormat: undefined,\r\n      decimals: undefined,\r\n    };\r\n    const aTracker: RuleItemTracker = {\r\n      rule: aRule,\r\n      order: order,\r\n      ID: uuidv4(),\r\n    };\r\n    setTracker([...tracker, aTracker]);\r\n    // add an opener also\r\n    setIsOpen([...isOpen, true]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n\r\n      <Button style={{ marginBottom: '16px' }} fill=\"solid\" variant=\"primary\" icon=\"plus\" onClick={addItem}>\r\n        Add Rule\r\n      </Button>\r\n      {tracker &&\r\n        tracker.map((item: RuleItemTracker, index: number) => {\r\n          return (\r\n            <Collapse\r\n              key={`collapse-item-index-${item.ID}`}\r\n              label={item.rule.name}\r\n              isOpen={isOpen[index]}\r\n              onToggle={() => toggleOpener(index)}\r\n              collapsible\r\n            >\r\n              <RuleItem\r\n                key={`rule-item-index-${item.ID}`}\r\n                ID={item.ID}\r\n                rule={item.rule}\r\n                enabled={item.rule.enabled}\r\n                setter={updateRule}\r\n                remover={removeRule}\r\n                moveUp={moveUp}\r\n                moveDown={moveDown}\r\n                createDuplicate={createDuplicate}\r\n                context={context}\r\n              />\r\n            </Collapse>\r\n          );\r\n        })}\r\n    </>\r\n  );\r\n};\r\n","export const ColorOK = 'rgba(55, 135, 45, 0.9)';\r\nexport const ColorDisaster = 'rgba(196, 22, 42, 0.9)';\r\nexport const ColorCritical = 'rgba(205, 49, 49, 0.9)';\r\nexport const ColorHigh = 'rgba(217, 92, 29, 0.9)';\r\nexport const ColorAverage = 'rgba(250, 100, 0, 0.99)';\r\nexport const ColorWarning = 'rgba(224, 180, 0, 0.99)';\r\nexport const ColorMinor = 'rgba(190, 213, 255, 0.99)';\r\nexport const ColorInformation = 'rgba(138, 184, 255, 0.99)';\r\nexport const ColorDisable = 'rgba(128, 128, 128, 0.9)';\r\nexport const ColorNa = 'rgba(20, 60, 120, 0.9)';\r\n","import { PanelPlugin } from '@grafana/data';\r\nimport { StatusOverviewOptions } from './types';\r\nimport { StatusOverviewPanel } from './components/StatusOverviewPanel';\r\nimport { RuleEditor } from './components/rules/RuleEditor';\r\nimport { RuleItemType } from './components/rules/types';\r\nimport * as cfg from './const';\r\n\r\nexport const plugin = new PanelPlugin<StatusOverviewOptions>(StatusOverviewPanel)\r\n  .setPanelOptions((builder) => {\r\n    return builder\r\n\r\n      .addTextInput({\r\n        path: 'panelName',\r\n        name: 'Panel name',\r\n        category: ['General'],\r\n        defaultValue: 'Example name panel',\r\n      })\r\n      .addRadio({\r\n        path: 'statePanel',\r\n        defaultValue: 'enable',\r\n        name: 'State panel',\r\n        category: ['General'],\r\n        settings: {\r\n          options: [\r\n            {\r\n              value: 'enable',\r\n              label: 'Enable',\r\n            },\r\n            {\r\n              value: 'disable',\r\n              label: 'Disable',\r\n            },\r\n            {\r\n              value: 'na',\r\n              label: 'N/A',\r\n            },\r\n          ],\r\n        },\r\n        //      showIf: config => config.showSeriesCount,\r\n      })\r\n      // .addUnitPicker({\r\n      //   name: 'Unit',\r\n      //   path: 'globalUnitFormat',\r\n      //   defaultValue: 'short',\r\n      //   category: ['General'],\r\n      //   description: 'Use this unit format when it is not specified in overrides or detected in data',\r\n      // })\r\n      // .addNumberInput({\r\n      //   name: 'Decimals',\r\n      //   path: 'globalDecimals',\r\n      //   description: 'Display specified number of decimals',\r\n      //   defaultValue: 2,\r\n      //   settings: {\r\n      //     min: 0,\r\n      //     integer: true,\r\n      //   },\r\n      //   category: ['General'],\r\n      // })\r\n      .addRadio({\r\n        path: 'modePanel',\r\n        defaultValue: 'line',\r\n        name: 'Mode panel',\r\n        category: ['General'],\r\n        settings: {\r\n          options: [\r\n            {\r\n              value: 'line',\r\n              label: 'Line by line',\r\n            },\r\n            {\r\n              value: 'in',\r\n              label: 'In one line',\r\n            },\r\n          ],\r\n        },\r\n        //      showIf: config => config.showSeriesCount,\r\n      })\r\n      .addBooleanSwitch({\r\n        name: 'Blink',\r\n        path: 'blink',\r\n        defaultValue: true,\r\n        category: ['General'],\r\n      })\r\n\r\n      .addTextInput({\r\n        path: 'dataLink',\r\n        name: 'DataLink',\r\n        category: ['General'],\r\n        description: 'Used on panel name if exist.\\n\\tExample: d/HQgMW5LVk/new-dashboard?orgId=1&refresh=30s&var-query0=$query0',\r\n        defaultValue: '',\r\n      })\r\n\r\n      // Text Spacing Options\r\n      .addNumberInput({\r\n        path: 'titleMargin',\r\n        name: 'Title Margin',\r\n        category: ['Text Spacing'],\r\n        description: 'Margin below the title (px)',\r\n        defaultValue: 10,\r\n        settings: {\r\n          min: 0,\r\n          max: 50,\r\n          integer: true,\r\n        },\r\n      })\r\n      .addNumberInput({\r\n        path: 'lineHeight',\r\n        name: 'Line Height',\r\n        category: ['Text Spacing'],\r\n        description: 'Line height for metrics (em)',\r\n        defaultValue: 1.5,\r\n        settings: {\r\n          min: 1,\r\n          max: 3,\r\n          step: 0.1,\r\n        },\r\n      })\r\n      .addNumberInput({\r\n        path: 'textSpacing',\r\n        name: 'Text Spacing',\r\n        category: ['Text Spacing'],\r\n        description: 'Spacing between metric rows (px)',\r\n        defaultValue: 5,\r\n        settings: {\r\n          min: 0,\r\n          max: 20,\r\n          integer: true,\r\n        },\r\n        showIf: config => config.modePanel !== 'in',\r\n      })\r\n      .addNumberInput({\r\n        path: 'inlineSpacing',\r\n        name: 'Inline Spacing',\r\n        category: ['Text Spacing'],\r\n        description: 'Spacing between metrics when displayed inline (px)',\r\n        defaultValue: 10,\r\n        settings: {\r\n          min: 0,\r\n          max: 50,\r\n          integer: true,\r\n        },\r\n        showIf: config => config.modePanel === 'in',\r\n      })\r\n\r\n      // .addSelect({\r\n      //   name: 'Stat',\r\n      //   path: 'globalOperator',\r\n      //   description: 'Statistic to display',\r\n      //   category: ['General'],\r\n      //   defaultValue: OperatorOptions[0].value,\r\n      //   settings: {\r\n      //     options: OperatorOptions,\r\n      //   },\r\n      // })    \r\n      .addColorPicker({\r\n        name: 'OK Color (default: ' + cfg.ColorOK + ')',\r\n        path: 'ColorOK',\r\n        category: ['Color'],\r\n        defaultValue: cfg.ColorOK,\r\n        showIf: config => config.statePanel === 'enable',\r\n      })\r\n      .addColorPicker({\r\n        name: 'Disable Color (default: ' + cfg.ColorDisable + ')',\r\n        path: 'ColorDisable',\r\n        category: ['Color'],\r\n        defaultValue: cfg.ColorDisable,\r\n      })\r\n      .addColorPicker({\r\n        name: 'Information Color (default: ' + cfg.ColorInformation + ')',\r\n        path: 'ColorInformation',\r\n        category: ['Color'],\r\n        defaultValue: cfg.ColorInformation,\r\n        showIf: config => config.statePanel === 'enable',\r\n      })\r\n      .addColorPicker({\r\n        name: 'Minor Color (default: ' + cfg.ColorMinor + ')',\r\n        path: 'ColorMinor',\r\n        category: ['Color'],\r\n        defaultValue: cfg.ColorMinor,\r\n        showIf: config => config.statePanel === 'enable',\r\n      })\r\n      .addColorPicker({\r\n        name: 'Warning Color (default: ' + cfg.ColorWarning + ')',\r\n        path: 'ColorWarning',\r\n        category: ['Color'],\r\n        defaultValue: cfg.ColorWarning,\r\n        showIf: config => config.statePanel === 'enable',\r\n      })\r\n      .addColorPicker({\r\n        name: 'Average Color (default: ' + cfg.ColorAverage + ')',\r\n        path: 'ColorAverage',\r\n        category: ['Color'],\r\n        defaultValue: cfg.ColorAverage,\r\n        showIf: config => config.statePanel === 'enable',\r\n      })\r\n      .addColorPicker({\r\n        name: 'High Color (default: ' + cfg.ColorHigh + ')',\r\n        path: 'ColorHigh',\r\n        category: ['Color'],\r\n        defaultValue: cfg.ColorHigh,\r\n        showIf: config => config.statePanel === 'enable',\r\n      })\r\n      .addColorPicker({\r\n        name: 'Critical Color (default: ' + cfg.ColorCritical + ')',\r\n        path: 'ColorCritical',\r\n        category: ['Color'],\r\n        defaultValue: cfg.ColorCritical,\r\n        showIf: config => config.statePanel === 'enable',\r\n      })\r\n      .addColorPicker({\r\n        name: 'Disaster Color (default: ' + cfg.ColorDisaster + ')',\r\n        path: 'ColorDisaster',\r\n        category: ['Color'],\r\n        defaultValue: cfg.ColorDisaster,\r\n        showIf: config => config.statePanel === 'enable',\r\n      })\r\n      .addColorPicker({\r\n        name: 'N/A Color (default: ' + cfg.ColorNa + ')',\r\n        path: 'ColorNa',\r\n        category: ['Color'],\r\n        defaultValue: cfg.ColorNa,\r\n        showIf: config => config.statePanel === 'enable',\r\n      })\r\n\r\n\r\n\r\n      .addCustomEditor({\r\n        name: 'Rules',\r\n        id: 'ruleConfig',\r\n        path: 'ruleConfig',\r\n        editor: RuleEditor,\r\n        defaultValue: {\r\n          rule: [] as RuleItemType[],\r\n          enabled: true,\r\n          animationSpeed: '1500',\r\n        },\r\n        category: ['Rules'],\r\n      });\r\n  });\r\n\r\n\r\n","\r\ninterface ColorResult {\r\n  backgroundColor: string;\r\n  textColor?: string;\r\n}\r\n\r\nexport function getColorByState(state: string | { state: string; customColor?: string; textColor?: string }, options: any): string | ColorResult {\r\n  // If state is an object with custom color, use it\r\n  if (typeof state === 'object') {\r\n    if (state.customColor && state.textColor) {\r\n      return {\r\n        backgroundColor: state.customColor,\r\n        textColor: state.textColor\r\n      };\r\n    } else if (state.customColor) {\r\n      return state.customColor;\r\n    }\r\n  }\r\n\r\n  // Otherwise, get the state string and use standard colors\r\n  const stateStr = typeof state === 'object' ? state.state : state;\r\n\r\n  switch (stateStr) {\r\n    case 'ok-state':\r\n      return options.ColorOK;\r\n    case 'disaster-state':\r\n      return options.ColorDisaster;\r\n    case 'critical-state':\r\n      return options.ColorCritical;\r\n    case 'high-state':\r\n      return options.ColorHigh;\r\n    case 'average-state':\r\n      return options.ColorAverage;\r\n    case 'warning-state':\r\n      return options.ColorWarning;\r\n    case 'minor-state':\r\n      return options.ColorMinor;\r\n    case 'information-state':\r\n      return options.ColorInformation;\r\n    case 'disable-state':\r\n      return options.ColorDisable;\r\n    case 'na-state':\r\n      return options.ColorNa;\r\n    default:\r\n      return 'rgba(0, 0, 0, 0)';\r\n  }\r\n}\r\n\r\n","import { compareValues } from './comparisonFunctions';\r\nimport { findWorstStatus } from './findWorstStatus';\r\nimport { RuleItemType } from '../components/rules/types';\r\nimport { AppEvents, getValueFormat, formattedValueToString } from '@grafana/data';\r\nimport { getAppEvents } from '@grafana/runtime';\r\nimport { MetricHint } from 'types';\r\n\r\n\r\nexport function displaySeriesData(metricHints: MetricHint[], rules: RuleItemType[]) {\r\n\r\n    const labelCounts: { [label: string]: number } = {};\r\n\r\n    metricHints.forEach((hint) => {\r\n        if (labelCounts[hint.label]) {\r\n            labelCounts[hint.label]++;\r\n        } else {\r\n            labelCounts[hint.label] = 1;\r\n        }\r\n    });\r\n\r\n    Object.entries(labelCounts).forEach(([label, count]) => {\r\n        // Ignore warnings for 'Time' label as multiple time fields are expected\r\n        if (count > 1 && label !== 'Time') {\r\n            getAppEvents().publish({\r\n                type: AppEvents.alertWarning.name,\r\n                payload: [`Warning: multiple metrics with the label \"${label}\" were found.`],\r\n            });\r\n        }\r\n    });\r\n\r\n    const result = [];\r\n    if (!rules) { return; }\r\n    for (const rule of rules) {\r\n        let series;\r\n        for (const hint of metricHints) {\r\n            //if (hint.label === rule.seriesMatch) {\r\n            if (new RegExp(rule.seriesMatch).test(hint.label)) {\r\n\r\n                series = hint;\r\n                //break;\r\n                if (!series) { continue; }\r\n\r\n                if (series) {\r\n                    if (((rule.displayMode === 'number' || rule.displayMode === 'string') && rule.showOnlyOnThreshold) && findWorstStatus([series], [rule]) === 'ok-state') { continue }\r\n                    const value = series.value;\r\n                    let shouldDisplay = true;\r\n\r\n                    if (rule.displayMode === 'show' && rule.logicExpress) {\r\n                        shouldDisplay = compareValues(\r\n                            value,\r\n                            rule.logicExpressValue as string,\r\n                            rule.logicalMode\r\n                        );\r\n                    }\r\n\r\n                    if (shouldDisplay) {\r\n                        let line = '';\r\n                        if (rule.showName) {\r\n                            if (rule.alias) {\r\n                                try {\r\n                                    const regex = new RegExp(rule.alias);\r\n                                    const match = regex.exec(series.label);\r\n\r\n                                    if (match && match[1]) {\r\n                                        line += match[1];\r\n                                    } else {\r\n                                        line += rule.alias;\r\n                                    }\r\n                                } catch (error) {\r\n                                    line += rule.alias;\r\n                                }\r\n                            } else {\r\n                                line += series.label;\r\n                            }\r\n                        }\r\n                        if (rule.showName && rule.showValue) { line += `: `; }\r\n                        if (rule.showValue) {\r\n                            // Apply rule-specific formatting if custom formatting is enabled\r\n                            if (rule.useCustomFormatting && rule.unitFormat) {\r\n                                // Apply custom formatting based on rule settings\r\n                                try {\r\n                                    const formatter = getValueFormat(rule.unitFormat);\r\n                                    const decimals = rule.decimals !== undefined ? rule.decimals : 2;\r\n                                    const formatted = formatter(value, decimals);\r\n                                    line += formattedValueToString(formatted);\r\n                                } catch (error) {\r\n                                    console.error('Error formatting value:', error);\r\n                                    // Fallback to default formatting\r\n                                    if (series.valueFormatted) {\r\n                                        line += series.valueFormatted;\r\n                                    } else {\r\n                                        line += value;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                // Use standard formatted value if available\r\n                                if (series.valueFormatted) {\r\n                                    line += series.valueFormatted;\r\n                                } else {\r\n                                    line += value;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (rule.showName || rule.showValue) {\r\n                            result.push({ line, tooltip: (rule.description ? rule.description : '') });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__644__","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__545__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__980__","__WEBPACK_EXTERNAL_MODULE__650__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","findWorstStatus","metricHints","rules","statusOrder","customColor","textColor","worstStatusIndex","rule","series","hint","RegExp","seriesMatch","test","label","displayMode","useCustomThresholds","customThresholds","length","sortedThresholds","sort","b","order","threshold","thresholdValue","parseFloat","isNaN","revers","statusIndex","indexOf","name","color","numberThreshold","status","entries","stringThreshold","statusValue","String","state","operators","compareValues","value1","value2","operator","operation","GetValueByOperator","metricName","data","operatorName","calcs","timestamp","Date","now","DataFrameToMetrics","frame","globalOperator","valueFields","aField","fields","type","FieldType","push","models","valueField","standardCalcs","reduceField","field","reducers","valueFieldName","getFieldDisplayName","operatorValue","maxDecimals","config","decimals","valueFormatted","timeValue","unit","result","getValueFormat","formattedValueToString","toISOString","model","thresholdLevel","valueRounded","roundValue","stats","displayName","prefix","suffix","clickThrough","newTabEnabled","sanitizedURL","sanitizeURLEnabled","showName","showValue","isComposite","members","fieldType","num","Math","pow","formatted","toFixed","round","getMetricHints","hints","metric","hintsValue","hintValue","blinkKeyframes","css","DisplayModes","LogicalModes","UnitFormatOptions","ThresholdEditor","thresholds","onChange","styles","useStyles2","getStyles","updateThreshold","index","updatedThresholds","moveThreshold","direction","swapIndex","div","h4","className","thresholdList","map","thresholdRow","horizontalGroup","Input","placeholder","e","currentTarget","width","colorPickerContainer","ColorPicker","IconButton","onClick","splice","removeThreshold","Button","variant","icon","nextOrder","max","t","newThreshold","addButton","theme","spacing","shape","borderRadius","colors","background","secondary","RuleItem","props","setMetricHints","useState","_setRule","setDisplayMode","keys","aKey","getDisplayMode","logicalMode","setLogicalMode","getLogicalMode","setRule","setter","visibleIcon","hiddenIcon","useEffect","context","Set","fieldTypeMap","Map","add","set","fieldTypeLabel","Card","heading","ID","FieldSet","Field","disabled","showRule","style","minWidth","Cascader","initialValue","allowCustomValue","options","onSelect","val","description","alias","TextArea","resize","Switch","transparent","currentState","currentShowValue","Select","menuShouldPortal","v","showOnlyOnThreshold","information","toString","match","minor","warning","average","high","critical","disaster","onKeyDown","keyCode","preventDefault","logicExpress","logicExpressValue","useCustomFormatting","find","option","unitFormat","min","parseInt","tooltip","moveUp","moveDown","createDuplicate","remover","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","Error","byteToHex","i","slice","buf","offset","rnds","random","arr","toLowerCase","unsafeStringify","RuleEditor","settings","ruleConfig","tracker","_setTracker","items","forEach","uuidv4","setTracker","allRules","element","isOpen","setIsOpen","size","openStates","arrayMove","oldIndex","newIndex","k","original","aTracker","isTemplated","enabled","showMembers","clickThroughOpenNewTab","clickThroughSanitize","shortAlias","updateRule","removeRule","ruleIndex","removeIndex","marginBottom","fill","item","Collapse","onToggle","toggleState","toggleOpener","collapsible","ColorOK","ColorDisaster","ColorCritical","ColorHigh","ColorAverage","ColorWarning","ColorMinor","ColorInformation","ColorDisable","ColorNa","plugin","PanelPlugin","height","id","replaceVariables","setState","blink","setBlink","displayData","setDisplayData","GlobalPanelState","useMemo","colorResult","backgroundColor","getColorByState","useStyles","wrapper","svg","textBox","valueMap","lineHeight","bottom_section","top_section","status_name_row","h1","margin","titleMargin","fontSize","statePanel","stateStr","blinkClass","labelCounts","count","getAppEvents","publish","AppEvents","payload","shouldDisplay","line","exec","error","formatter","console","displaySeriesData","cx","dataLink","href","panelName","span","modePanel","marginRight","inlineSpacing","Tooltip","content","whiteSpace","textSpacing","setPanelOptions","builder","addTextInput","path","category","defaultValue","addRadio","addBooleanSwitch","addNumberInput","integer","step","showIf","addColorPicker","cfg","addCustomEditor","editor","animationSpeed"],"sourceRoot":""}